GIT GOOD PRACTICES AND PROCEDURES

HOTFIX RELEASE-PATCH

-checkout master (up to date)

-create a new release branch (it will checkout this release branch, "release/v.1.x.0")

-cherry pick the commits needed

-mvn clean install

-replace all version # in POM files, 18entries in 17files

-commit and push release branch to origin

-checkout master

-merge with no fastforward ff ensure not to direct merge
git merge release/v1.x.x --no-ff

-push



MINOR/MAJOR RELEASE (feature on develop to master)

-checkout develop (up to date)

-create a new release branch (it will checkout this release branch "release/v.1.x.0")

-commit and push release branch to origin

-checkout master

-merge with no fastforward
git merge release/v1.4.3 --no-ff

-push

-checkout develop

-Bump version to 1.x+1.0-SNAPSHOT

-push



NEW FEATURE TO DEVELOP

-merge ORIGIN/develop into my featureBranch
-push



-RESET CURRENT BRANCH TO HERE
ensure no commits pendings
Hard, it will add all the commits after the current position, into my current branch
then force push is needed



MERGE MASTER TO DEV, AND CHECK MODFS THEN MERGE MY DEV CHANGES TO MASTER
cd /prj
#(on branch development)$ 
git checkout devel
#commit all pendings
git commit -am "commit"
git push
git merge master
#(resolve any merge conflicts if there are any)
git checkout master
git merge --no-ff devel
#(there won't be any conflicts now)
git push
#----------------



#check current files status and current branch
#git status

#to rollback the last ADD
git reset HEAD


#commit the modifieds
git commit -am "dns tunnel more readable2"

#see pending pushes of my branch local (to send to the server)
git log --branches --not --remotes
git diff --branches --not --remotes



#See diferences on same branch
git log origin/deve..HEAD
#You can also view the diff using the same syntax
git diff origin/master..HEAD

#see pending pushes from my local to server
git log --branches
git diff --branches


